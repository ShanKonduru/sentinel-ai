version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sentinel}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sentinel_password}
      POSTGRES_DB: ${POSTGRES_DB:-sentinel_ai}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sentinel}"]
      interval: 30s
      timeout: 10s
      retries: 3

  metrics-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.metrics-api
      target: production
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sentinel}:${POSTGRES_PASSWORD:-sentinel_password}@postgres:5432/${POSTGRES_DB:-sentinel_ai}
      FLASK_ENV: production
      FLASK_DEBUG: 0
    ports:
      - "${METRICS_API_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  data-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.data-api
      target: production
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sentinel}:${POSTGRES_PASSWORD:-sentinel_password}@postgres:5432/${POSTGRES_DB:-sentinel_ai}
      FASTAPI_ENV: production
    ports:
      - "${DATA_API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.dashboard
      target: production
    environment:
      VITE_METRICS_API_URL: ${VITE_METRICS_API_URL:-/api/v1/metrics}
      VITE_DATA_API_URL: ${VITE_DATA_API_URL:-/api/v1}
    ports:
      - "${DASHBOARD_PORT:-80}:80"
    depends_on:
      - metrics-api
      - data-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  default:
    name: sentinel-ai-network